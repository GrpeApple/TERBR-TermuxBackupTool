#!/data/data/com.termux/files/usr/bin/bash

# TERBR v2.3 - Termux Backup/Restore Tool
# Copyright (C) 2020  MrAlpha786
#
#  This program is free software: you can redistribute it 
# and/ or modify it under the terms of the GNU General Public
# License as published by the Free Software Foundation either
# version 3 of the License, or (at your option) any later
# version.
#
#  This program is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
# PURPOSE.  See the GNU General Public License for more
# details.
#
#  You should have received a copy of the GNU General 
# Public License along with this program.  If not, see
# <https://www.gnu.org/licenses/>.
#
# Author: MrAlpha786     (github/MrAlpha786)
#
trap 'rm -f "$BACKUP_DEST.tar.gz"' 1 2 3 15 20
stty -echo
#colors
R='\033[1;31m'
B='\033[1;34m'
C='\033[0;36m'
G='\033[1;32m'
W='\033[1;37m'
Y='\033[1;33m'
N='\033[0m'
UP='\u001b[3A'
A='\u001b[2A'
readonly BACKUP_SRC='/data/data/com.termux/files'
readonly DEFAULT_DEST='/storage/emulated/0/'
readonly TERBR_PROP="$HOME/.termux/terbr.pref"
BACKUP_DEST=""
n=0

banner () {
    clear
    echo
    echo -e $B" ┌───────────────────────┐ "
    echo -e $B" │$C         TERBR         $B│"
    echo -e $B" └───────────────────────┘ "
    echo -e $R"  -> MrAlpha786 $N"
    echo
}

help () {

	echo -e "usage: terbr [option] "
	echo -e "   -h  --help         Print Help and exit"
	echo -e "   -v  --version      Print Version"
	echo -e "   -b  --backup       Take Backup"
	echo -e "   -r  --restore      Restore Backup"
    echo -e "   -c  --change-dir   Change Backup Directory"
}

version () {
	
    echo "terbr v2.8 - Termux Backup/Restore Tool"
    echo "A tool to Backup and Restore Termux"
    echo -e "Copyright (C) 2020  MrAlpha786"
    echo "This program is free software: you can redistribute it and/or modify it under the terms of the GNU GPL v3.0 as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version."
    echo
    echo "This program is distributed WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE."
    echo
    echo "Author: MrAlpha786 (github.com/MrAlpha786)"
}

get_DEST () {
  
    local DEST="/storage/emulated/0/"

    while true; do
        clear
        
        banner

        echo -e " Choose Directory: \n"
        echo -e " (Place \"+\" in front to select directory e.g.\"1+\"\n  or only \"+\" to select current directory.)"
        echo

        dn=$(ls -F $DEST | grep / | wc -l)


            cd $DEST
            echo -e "$G $PWD"
            echo
            echo "     +  . "
            echo "     0  .."
            ls -F $DEST | grep / | nl

            stty echo
            read -p " Select[0-$dn]: " n
            stty -echo

            if [[ $n =~ ^[0-9]+$ && $n -eq 0 ]]; then            
                if [ $PWD == "/storage/emulated/0" ]; then
                    echo -e "$R Permission Denied!"
                    sleep 1
                    continue
                else
                    cd ..
                    DEST="$PWD/"
                fi

            elif [[ $n =~ ^[0-9]+$ && $n -le $dn ]]; then
                DEST+="$(ls -F | grep / | head -$n | tail -1)"
            elif [[ $n =~ ^[1-9]+\+$ ]]; then
                
                n=${n/\+/}
                if [[ $n -ge 1 && $n -lt $dn ]]; then
                    DEST+="$(ls -F | grep / | head -$n | tail -1)"
                    if [ $1 == "R" ]; then
                        echo $DEST > $TERBR_PROP
                        return
                                
                    else
                        set_DEST $DEST
                        return
                    fi

                else
                    echo -e "$R Invalid Option!"
                    sleep 1
                    continue
                fi
    
            elif [[ ${n} == "+" ]]; then
                DEST="$PWD/"

                if [ $1 == "R" ]; then
                    echo $DEST > $TERBR_PROP
                    return 0
                                
                else
                    set_DEST $DEST
                    return 0
                fi
            else
                echo -e "$R Invalid Option!"
                sleep 1
                continue
            fi

done
    
}


set_DEST () {

    banner

    echo -e " Do you want to save backup here? "
    echo
    echo -e "$G 1. $1"
    echo
    echo -e "$N or in separate directory? "
    echo
    echo -e "$G 2. $1 \bTermux/$N"
    echo
    
    stty echo
    read -p " [1/2/Default=1]: " yon
    stty -echo

    case $yon in

        [2]*) 
            BACKUP_DEST="$1Termux/"
            echo $BACKUP_DEST > $TERBR_PROP
            echo
            echo " Location preferences set!"
            exit 0 ;;

        *)
            BACKUP_DEST="$1"
            echo $BACKUP_DEST > $TERBR_PROP
            echo
            echo " Location preferences set!"
            exit 0 ;;
    esac


}


check_DEST () {

    banner

    if [ ! -f  $TERBR_PROP ]; then

        echo -e " 1. Choose a new location."
        echo
        echo -e " 2. Choose Default location "
        echo -e " [Default: /storage/emulated/0/]"
        echo

        stty echo
        read -p " [1/2/Default=2]: " yon
        stty -echo

        case $yon in

            [1]*)
                get_DEST ;;

            *)
                BACKUP_DEST="$DEFAULT_DEST"
                echo $BACKUP_DEST > $TERBR_PROP
                echo
                echo " Location preferences set!"
                return 0 ;;
        esac

    else
        return 0
    fi

}


check_FILE () {

    while true; do
        
        banner
        
        if [[ -f $TERBR_PROP && -s $TERBR_PROP ]]; then
            read BACKUP_DEST < $TERBR_PROP
        else
            BACKUP_DEST="$DEFAULT_DEST"
        fi

        n=$(ls ${BACKUP_DEST} | grep .tar.gz | wc -l)
    
        if [ $n -eq 0 ]; then

            echo -e "$G $BACKUP_DEST \n"
            echo -e "$R No Backup found!\n"
            echo -e "$N Search Other directory.\c"

            stty echo
            read -p " [y/n/Default=y]: " yon
            stty -echo

            case $yon in

                [Nn]*)
                    echo
                    echo -e "$R Aborted! "
                    sleep 1
                    return 1 ;;

                *)
                    get_DEST R ;;
            esac
        else
            return 0
        fi
    done
}


backup () {

    banner

    read BACKUP_DEST < $TERBR_PROP
    
    if [ ! -d $BACKUP_DEST ]; then
            mkdir -p $BACKUP_DEST
    fi

    BACKUP_DEST+="termux_backup$(date +%m%d%Y_%H%M%S)"

    echo -e "$G $BACKUP_DEST.tar.gz"
    echo
    echo -e $Y" [*] Backing Up Files.............."
    sleep 1 
    echo -e $R" [!] It may take a while. Please wait...\r $A"
    
    tar -zcf $BACKUP_DEST.tar.gz usr home &> /dev/null

    echo -e $Y" [!] Backing Up Files..............$G DONE"
    echo -e $R" [!] It may take a while. Please wait..."
    echo
    echo -e $G" [!] Backup Done! "
}

restore () {

    banner

    read BACKUP_DEST < $TERBR_PROP

    n=$(ls ${BACKUP_DEST}*.tar.gz | wc -l)

    echo -e "$G Select backup: \n"
    ls -t ${BACKUP_DEST}*.tar.gz | nl
    echo -e "$N"
    stty echo
    read -p " [1-$n/0=Abort/Default=0]: " yon
    stty -echo

    echo

    if [[ $yon -ge 1 && $yon -le $n && $yon =~ ^[0-9]+$  ]]; then
        BACKUP_DEST=$(ls -t ${BACKUP_DEST}*.tar.gz | head -${yon} | tail -1)

    else
        echo -e "$R Aborted!"
        return 1
    fi       
   
    echo -e "$G $BACKUP_DEST"
    echo
    echo -e $Y" [*] Restoring Files..............."
    sleep 1
    echo -e $R" [!] It may take a while. Please wait...\r $A"

    tar -zxf $BACKUP_DEST usr home &> /dev/null
    echo -e $Y" [!] Restoring Files...............$G DONE"
    echo -e $R" [!] It may take a while. Please wait..."
    echo
    echo -e $G" [!] Restore Done! "
}

termux-setup-storage

if [ ! -d "$HOME/.termux" ]; then
    mkdir -p "$HOME/.termux"
fi

cd $BACKUP_SRC

[ $# -eq 0 ] && check_DEST && help
if [ ! $# == 0 ]; then

	case $1 in
		"-h" | "--help" )
            help ;;

		"-v" | "--version" )
            version ;;

		"-r" | "--restore" )
            check_FILE
            [ $? -eq 0 ] && restore ;; 

		"-b" | "--backup" )
            check_DEST
            backup ;;

        "-c" | "--change-dir" )
            rm -f $TERBR_PROP
            check_DEST ;;

	    * )
            echo  "Invalid option!"
            echo -e "Try \"-h\" or \"--help\" for Help!"
	esac
fi
exit
